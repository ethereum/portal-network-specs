[
  {
    "name": "portal_beaconRoutingTableInfo",
    "summary": "Returns meta information about beacon network routing table.",
    "params": [],
    "result": {
      "$ref": "#/components/contentDescriptors/RoutingTableInfoResult"
    }
  },
  {
    "name": "portal_beaconAddEnr",
    "summary": "Write an ethereum node record to the routing table.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/AddEnrResult"
    }
  },
  {
    "name": "portal_beaconGetEnr",
    "summary": "Fetch from the local node the latest ENR associated with the given NodeId",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/GetEnrResult"
    }
  },
  {
    "name": "portal_beaconDeleteEnr",
    "summary": "Delete a Node ID from the routing table",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/DeleteEnrResult"
    }
  },
  {
    "name": "portal_beaconLookupEnr",
    "summary": "Fetch from the DHT the latest ENR associated with the given NodeId",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/LookupEnrResult"
    }
  },
  {
    "name": "portal_beaconPing",
    "summary": "Send a PING message to the designated node and wait for a PONG response.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/PingResult"
    }
  },
  {
    "name": "portal_beaconFindNodes",
    "summary": "Send a FINDNODES request for nodes that fall within the given set of distances, to the designated peer and wait for a response.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      },
      {
        "$ref": "#/components/contentDescriptors/Distances"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/FindNodeResult"
    }
  },
  {
    "name": "portal_beaconFindContent",
    "summary": "Send FINDCONTENT message to get the content with a content key.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      },
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/FindContentResult"
    }
  },
  {
    "name": "portal_beaconOffer",
    "summary": "Send an OFFER request with given array of content items (keys & values), to the designated peer and wait for a response. The client MUST return an error if more than 64 content items are provided or less than 1 content items are provided.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      },
      {
        "$ref": "#/components/contentDescriptors/ContentItems"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/OfferResult"
    }
  },
  {
    "name": "portal_beaconOptimisticStateRoot",
    "summary": "Get latest known optimistic beacon state root.",
    "params": [],
    "result": {
      "$ref": "#/components/contentDescriptors/BeaconOptimisticStateRootResult"
    }
  },
  {
    "name": "portal_beaconRecursiveFindNodes",
    "summary": "Look up ENRs closest to the given target, that are members of the beacon network",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/RecursiveFindNodesResult"
    }
  },
  {
    "name": "portal_beaconGetContent",
    "summary": "Get content from the local database if it exists, otherwise look up the target content key in the network. After fetching from the network the content is validated for correctness and stored in the local database if storage criteria is met before being returned.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/GetContentResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/ContentNotFoundError"
      }
    ]
  },
  {
    "name": "portal_beaconTraceGetContent",
    "summary": "Get content as defined in portal_beaconGetContent and get additional tracing data",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/TraceGetContentResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/ContentNotFoundErrorWithTrace"
      }
    ]
  },
  {
    "name": "portal_beaconStore",
    "summary": "Store beacon content key with content data",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      },
      {
        "$ref": "#/components/contentDescriptors/ContentValue"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/StoreResult"
    }
  },
  {
    "name": "portal_beaconLocalContent",
    "summary": "Get a content from the local database",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/LocalContentResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/ContentNotFoundError"
      }
    ]
  },
  {
    "name": "portal_beaconPutContent",
    "summary": "Validate that the content is well formed and store it in the local database if storage criteria is met, then send the content to interested peers. Clients may choose to send to some or all peers.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      },
      {
        "$ref": "#/components/contentDescriptors/ContentValue"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/PutContentResult"
    }
  }
]
