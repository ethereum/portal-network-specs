[
  {
    "name": "portal_beaconRoutingTableInfo",
    "summary": "Returns meta information about beacon network routing table.",
    "params": [],
    "result": {
      "$ref": "#/components/contentDescriptors/RoutingTableInfoResult"
    }
  },
  {
    "name": "portal_beaconAddEnr",
    "summary": "Write an ethereum node record to the routing table.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/AddEnrResult"
    }
  },
  {
    "name": "portal_beaconGetEnr",
    "summary": "Fetch from the local node the latest ENR associated with the given NodeId",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/GetEnrResult"
    }
  },
  {
    "name": "portal_beaconDeleteEnr",
    "summary": "Delete a Node ID from the routing table",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/DeleteEnrResult"
    }
  },
  {
    "name": "portal_beaconLookupEnr",
    "summary": "Fetch from the DHT the latest ENR associated with the given NodeId",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/LookupEnrResult"
    }
  },
  {
    "name": "portal_beaconPing",
    "summary": "Send a PING message to the designated node and wait for a PONG response. By default, the client will send a capabilities extension payload. If the payloadType is specified without a payload, the client will generate the default payload for that payloadType. If the payload is specified, the client will send the specified payload. payload requires the payloadType to be specified or a -39006 error will be thrown. If the payloadType isn't support by the client or the subnetwork a -39004 error will be thrown. If the specified payload fails to decode a -39005 error will be thrown.",
    "params": [
        {
          "$ref": "#/components/contentDescriptors/Enr"
        },
        {
          "$ref": "#/components/contentDescriptors/PayloadType"
        },
        {
          "$ref": "#/components/contentDescriptors/Payload"
        }
      ],
    "result": {
        "$ref": "#/components/contentDescriptors/PingResult"
    },
    "errors": [
        {
            "$ref": "#/components/errors/PayloadTypeNotSupportedError"
        },
        {
            "$ref": "#/components/errors/FailedToDecodePayloadError"
        },
        {
            "$ref": "#/components/errors/PayloadTypeRequiredError"
        },
        {
            "$ref": "#/components/errors/UserSpecifiedPayloadBlockedByClientError"
        }
    ],
    "examples": [
        {
            "name": "Only specifying the ENR",
            "description": "A successful PING request and response using only specifying the ENR.",
            "params": [
              {
                "name": "enr",
                "value": "enr:-IS4QIa7W1_Yvvl5OJ2Pp3Gp1dJ3..."
              }
            ],
            "result": {
              "name": "pingResult",
              "value": {
                "enrSeq": 1,
                "payloadType": 0,
                "payload": {
                  "clientInfo": "trin/v0.1.1-b61fdc5c/linux-x86_64/rustc1.81.0",
                  "dataRadius": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
                  "capabilities": [0, 1, 65535]
                }
              }
            }
        },
        {
            "name": "Only specifying the ENR and the payload_type",
            "description": "A successful PING request and response using only specifying the ENR and the payload is generated by the payload_type.",
            "params": [
              {
                "name": "enr",
                "value": "enr:-IS4QIa7W1_Yvvl5OJ2Pp3Gp1dJ3..."
            },
            {
              "name": "payloadType",
              "value":  0
            }
            ],
            "result": {
              "name": "pingResult",
              "value": {
                "enrSeq": 1,
                "payloadType": 0,
                "payload": {
                  "clientInfo": "trin/v0.1.1-b61fdc5c/linux-x86_64/rustc1.81.0",
                  "dataRadius": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
                  "capabilities": [0, 1, 65535]
                }
              }
            }
        },        
        {
          "name": "ClientInfoAndCapabilities Example",
          "description": "A successful PING request and response using the ClientInfoAndCapabilities payload.",
          "params": [
            {
              "name": "enr",
              "value": "enr:-IS4QIa7W1_Yvvl5OJ2Pp3Gp1dJ3..."
            },
            {
                "name": "payloadType",
                "value":  0
            },
            {
                "name": "payload",
                "value": {
                  "clientInfo": "trin/v0.1.1-b61fdc5c/linux-x86_64/rustc1.81.0",
                  "dataRadius": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
                  "capabilities": [0, 1, 65535]
                }
            }
          ],
          "result": {
            "name": "pingResult",
            "value": {
              "enrSeq": 1,
              "payloadType": 0,
              "payload": {
                "clientInfo": "trin/v0.1.1-b61fdc5c/linux-x86_64/rustc1.81.0",
                "dataRadius": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
                "capabilities": [0, 1, 65535]
              }
            }
          }
        }
      ] 
  },
  {
    "name": "portal_beaconFindNodes",
    "summary": "Send a FINDNODES request for nodes that fall within the given set of distances, to the designated peer and wait for a response.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      },
      {
        "$ref": "#/components/contentDescriptors/Distances"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/FindNodeResult"
    }
  },
  {
    "name": "portal_beaconFindContent",
    "summary": "Send FINDCONTENT message to get the content with a content key.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/Enr"
      },
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/FindContentResult"
    }
  },
  {
    "name": "portal_beaconOffer",
    "summary": "Send an OFFER request with given array of content items (keys & values), to the designated peer and wait for a response. The client MUST return an error if more than 64 content items are provided or less than 1 content items are provided.",
    "params": [
        {
            "$ref": "#/components/contentDescriptors/Enr"
        },
        {
            "$ref": "#/components/contentDescriptors/PayloadType"
        },
        {
            "$ref": "#/components/contentDescriptors/Payload"
        }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/OfferResult"
    }
  },
  {
    "name": "portal_beaconOptimisticStateRoot",
    "summary": "Get latest known optimistic beacon state root.",
    "params": [],
    "result": {
      "$ref": "#/components/contentDescriptors/BeaconOptimisticStateRootResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/BeaconClientNotInitializedError"
      }
    ]
  },
  {
    "name": "portal_beaconFinalizedStateRoot",
    "summary": "Get latest known finalized beacon state root.",
    "params": [],
    "result": {
      "$ref": "#/components/contentDescriptors/BeaconFinalizedStateRootResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/BeaconClientNotInitializedError"
      }
    ]
  },
  {
    "name": "portal_beaconRecursiveFindNodes",
    "summary": "Look up ENRs closest to the given target, that are members of the beacon network",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/NodeId"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/RecursiveFindNodesResult"
    }
  },
  {
    "name": "portal_beaconGetContent",
    "summary": "Get content from the local database if it exists, otherwise look up the target content key in the network. After fetching from the network the content is stored in the local database if storage criteria is met before being returned.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/GetContentResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/ContentNotFoundError"
      }
    ]
  },
  {
    "name": "portal_beaconTraceGetContent",
    "summary": "Get content as defined in portal_beaconGetContent and get additional tracing data",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/TraceGetContentResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/ContentNotFoundErrorWithTrace"
      }
    ]
  },
  {
    "name": "portal_beaconStore",
    "summary": "Store beacon content key with content data",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      },
      {
        "$ref": "#/components/contentDescriptors/ContentValue"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/StoreResult"
    }
  },
  {
    "name": "portal_beaconLocalContent",
    "summary": "Get a content from the local database",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/LocalContentResult"
    },
    "errors": [
      {
        "$ref": "#/components/errors/ContentNotFoundError"
      }
    ]
  },
  {
    "name": "portal_beaconPutContent",
    "summary": "Store the content in the local database if storage criteria is met, then send the content to interested peers using the client's default gossip mechanisms.",
    "params": [
      {
        "$ref": "#/components/contentDescriptors/ContentKey"
      },
      {
        "$ref": "#/components/contentDescriptors/ContentValue"
      }
    ],
    "result": {
      "$ref": "#/components/contentDescriptors/PutContentResult"
    }
  }
]
